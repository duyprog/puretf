name: TF Plan (PR)

on:
  pull_request:
    paths:
      - 'envs/**'
      - 'modules/**'
      - '.github/workflows/**'

permissions:
  id-token: write     # for AWS OIDC
  contents: read
  pull-requests: write

env: 
  DEV_ACCOUNT_ID: "565138482777"
  PROD_ACCOUNT_ID: "123456789012"

jobs:
  discover:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.mk.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - uses: tj-actions/changed-files@v45
        id: cf
        with:
          files: |
            envs/**
            modules/**
      - id: mk
        shell: bash
        run: |
          set -euo pipefail
          set -x

          changed="$(printf '%s\n' ${{ steps.cf.outputs.all_changed_files }})"
          list=""

          if echo "$changed" | grep -q '^modules/'; then
            # modules changed â†’ include ALL stacks under each env
            while IFS= read -r d; do
              env="$(echo "$d" | cut -d/ -f2)"
              stack="$(echo "$d" | cut -d/ -f3)"
              region="us-east-1"
              if [ "$env" = "prod" ]; then
                account_id="${{ env.PROD_ACCOUNT_ID }}"
              else
                account_id="${{ env.DEV_ACCOUNT_ID }}"
              fi
              list="${list}{\"env\":\"${env}\",\"stack\":\"${stack}\",\"region\":\"${region}\",\"account_id\":\"${account_id}\"},"
            done < <(find envs -maxdepth 2 -mindepth 2 -type d | sort)
          else
            # only stacks whose paths changed
            : > /tmp/keys || true
            while IFS= read -r f; do
              case "$f" in
                envs/*/*/*)
                  env="$(echo "$f" | cut -d/ -f2)"
                  stack="$(echo "$f" | cut -d/ -f3)"
                  printf '%s/%s\n' "$env" "$stack" >> /tmp/keys
                ;;
              esac
            done <<< "$changed"

            if [ -s /tmp/keys ]; then
              while IFS= read -r key; do
                env="$(echo "$key" | cut -d/ -f1)"
                stack="$(echo "$key" | cut -d/ -f2)"
                region="us-east-1"
                if [ "$env" = "prod" ]; then
                  account_id="${{ env.PROD_ACCOUNT_ID }}" 
                else
                  account_id="${{ env.DEV_ACCOUNT_ID }}"
                fi
                list="${list}{\"env\":\"${env}\",\"stack\":\"${stack}\",\"region\":\"${region}\",\"account_id\":\"${account_id}\"},"
              done < <(sort -u /tmp/keys)
            fi
          fi

          json="{\"include\":[${list%,}]}"
          echo "matrix=$json" >> "$GITHUB_OUTPUT"

  plan:
    needs: discover
    if: ${{ fromJson(needs.discover.outputs.matrix).include != null && (join(fromJson(needs.discover.outputs.matrix).include, '') != '') }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.discover.outputs.matrix) }}
    uses: ./.github/workflows/tf-reusable.yml
    with:
      env: ${{ matrix.env }}
      stack: ${{ matrix.stack }}
      region: ${{ matrix.region }}
      account_id: ${{ matrix.account_id }}
      role_name: "gha-tf"
    secrets:
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}